
R Under development (unstable) (2025-03-23 r88038) -- "Unsuffered Consequences"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(gupd)
> 
> # Uniform
> 
> distr <- ghupd_new(10, log(c(1, 1, 1, 1)), list(method = "uniform"))
> 
> sum(sapply(1:5, \(x) {
+   exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(10 - x, x)))
+ })) # Should be 1
[1] 1
> 
> 
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(9, 1)))
[1] 0.2
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(8, 2)))
[1] 0.2
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(7, 3)))
[1] 0.2
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(6, 4)))
[1] 0.2
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(5, 5)))
[1] 0.2
> 
> 
> exp(ghupd_log_probability_n_clusters(distr, 2))
[1] 0.25
> 
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(9, 1)))
[1] 0.2
> ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(5, 5))
[1] -1.609438
> 
> 
> 
> 
> distr <- ghupd_new(10, log(c(0.20, 0.30, 0.10, 0.25, 0.15)), list(method = "uniform"))
> 
> x <- table(sapply(seq_len(10000), \(x) ghupd_sample_n_clusters(distr)))
> x / sum(x)  # Should match weights above

     1      2      3      4      5 
0.1984 0.3033 0.0995 0.2541 0.1447 
> 
> distr <- ghupd_new(10, log(c(1, 1, 1, 1, 1)), list(method = "uniform"))
> 
> x <- table(sapply(seq_len(10000), \(x) ghupd_sample_n_clusters(distr)))
> x / sum(x)  # Should be uniform

     1      2      3      4      5 
0.1970 0.1997 0.2112 0.1926 0.1995 
> 
> # Should be an error
> tryCatch(ghupd_sample_cluster_sizes_given_n_clusters(distr, 0), error = \(x) x)
<simpleError in ghupd_sample_cluster_sizes_given_n_clusters(distr, 0): 'n_clusters' is out of bounds>
> ghupd_sample_cluster_sizes_given_n_clusters(distr, 5)
[1] 4 2 2 1 1
> tryCatch(ghupd_sample_cluster_sizes_given_n_clusters(distr, 6), error = \(x) x)
<simpleError in ghupd_sample_cluster_sizes_given_n_clusters(distr, 6): 'n_clusters' is out of bounds>
> 
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 2))), collapse="")))
> x / sum(x)  # Should be uniform

    55     64     73     82     91 
0.2082 0.1977 0.1979 0.1964 0.1998 
> 
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)  # Should be uniform

   433    442    532    541    622    631    721    811 
0.1186 0.1241 0.1276 0.1276 0.1231 0.1283 0.1186 0.1321 
> 
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 4))), collapse="")))
> x / sum(x)  # Should be uniform

  3322   3331   4222   4321   4411   5221   5311   6211   7111 
0.1051 0.1173 0.1123 0.1139 0.1101 0.1070 0.1127 0.1099 0.1117 
> 
> sum(sapply(seq_len(1000), \(x) length(unique(ghupd_sample_partition_given_n_clusters(distr, 4)))) != 4) # Should be zero
[1] 0
> 
> sum(sapply(seq_len(1000), \(x) length(unique(ghupd_sample_partition_given_n_clusters(distr, 3)))) != 3) # Should be zero
[1] 0
> 
> rev(sort(table(ghupd_sample_partition_given_cluster_sizes(distr, c(6, 4)))))

1 2 
6 4 
> 
> # Should be an error
> tryCatch(ghupd_sample_partition_given_cluster_sizes(distr, c(4, 1, 1, 1, 1, 1)), error = \(x) x)
<simpleError in ghupd_sample_partition_given_cluster_sizes(distr, c(4, 1, 1,     1, 1, 1)): 'cluster_sizes' implies more clusters than specified>
> 
> tryCatch(ghupd_sample_partition_given_cluster_sizes(distr, c(4, 1)), error = \(x) x)
<simpleError in ghupd_sample_partition_given_cluster_sizes(distr, c(4, 1)): 'cluster_sizes' implies the wrong number of items>
> 
> distr <- ghupd_new(10, log(c(1)), list(method = "uniform"))
> tryCatch(ghupd_new(10, numeric(0), list(method = "uniform")), error = \(x) x)
<simpleError in ghupd_new(10, numeric(0), list(method = "uniform")): There must be at least one cluster>
> tryCatch(ghupd_new(10, -Inf, list(method = "uniform")), error = \(x) x)
<simpleError in ghupd_new(10, -Inf, list(method = "uniform")): Invalid distribution for the number of clusters>
> x <- table(sapply(seq_len(10000), \(x) ghupd_sample_n_clusters(distr)))
> x / sum(x)  # Should be one

1 
1 
> 
> distr <- ghupd_new(10, rep(1, 5), list(method = "uniform"))
> exp(ghupd_log_probability_n_clusters(distr, 0)) # Should be zero
[1] 0
> exp(ghupd_log_probability_n_clusters(distr, 1)) # Should be 0.2
[1] 0.2
> exp(ghupd_log_probability_n_clusters(distr, 5)) # Should be 0.2
[1] 0.2
> exp(ghupd_log_probability_n_clusters(distr, 6)) # Should be zero
[1] 0
> 
> exp(-ghupd_log_probability_partition_given_cluster_sizes(distr, c(5, 3, 2))) # Should be 2520
[1] 2520
> exp(-ghupd_log_probability_partition_given_cluster_sizes(distr, c(5, 3, 1))) # Should be zero
[1] Inf
> 
> ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(5, 3, 2)) # Should be the same
[1] -2.079442
> ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(6, 3, 1)) # Should be the same
[1] -2.079442
> ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(7, 2, 1)) # Should be the same
[1] -2.079442
> ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(4, 3, 3)) # Should be the same
[1] -2.079442
> 
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(5, 5))) # Should be 0.2
[1] 0.2
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(6, 4))) # Should be 0.2
[1] 0.2
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(7, 3))) # Should be 0.2
[1] 0.2
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(8, 2))) # Should be 0.2
[1] 0.2
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(9, 1))) # Should be 0.2
[1] 0.2
> 
> distr <- ghupd_new(5, c(1, 1, 1, 1, 1), list(method = "uniform"))
> cluster_sizes <- rev(sort(table(ghupd_sample_partition(distr))))
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, cluster_sizes))
[1] 1
> 
> n_items <- 10
> distr <- ghupd_new(n_items, c(1, 1, 1, 1), list(method = "uniform"))
> partitions <- salso::enumerate.partitions(n_items)
> x <- apply(partitions, 1, \(p) exp(ghupd_log_probability_partition(distr, p)))
> sum(x == 0.0)
[1] 72028
> sum(x != 0.0)
[1] 43947
> sum(x) # Should be 1
[1] 1
> 
> n_items <- 10
> distr <- ghupd_new(n_items, rep(1, n_items), list(method = "uniform"))
> partitions <- salso::enumerate.partitions(n_items)
> x <- apply(partitions, 1, \(p) exp(ghupd_log_probability_partition(distr, p)))
> sum(x == 0.0)
[1] 0
> sum(x != 0.0)
[1] 115975
> sum(x) # Should be 1
[1] 1
> 
> 
> # Titled Uniform
> 
> distr <- ghupd_new(10, log(c(1, 1, 1, 1)), list(method = "tilted_uniform", tilt = 0.0))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)  # Should be uniform

   433    442    532    541    622    631    721    811 
0.1185 0.1305 0.1267 0.1221 0.1196 0.1248 0.1242 0.1336 
> 
> distr <- ghupd_new(10, log(c(1, 1, 1, 1)), list(method = "tilted_uniform", tilt = 0.5))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

   433    442    532    541    622    631    721    811 
0.3909 0.2820 0.1732 0.0797 0.0421 0.0278 0.0041 0.0002 
> 
> distr <- ghupd_new(10, log(c(1, 1, 1, 1)), list(method = "tilted_uniform", tilt = -0.5))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

   433    442    532    541    622    631    721    811 
0.0168 0.0089 0.0177 0.0030 0.0761 0.0054 0.0395 0.8326 
> 
> distr <- ghupd_new(10, log(c(1, 1, 1, 1)), list(method = "tilted_uniform", tilt = 2.0))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

   433    442    532    622 
0.9050 0.0824 0.0125 0.0001 
> 
> distr <- ghupd_new(10, log(c(1, 1, 1, 1)), list(method = "tilted_uniform", tilt = -2.0))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

   622    811 
0.0003 0.9997 
> 
> distr <- ghupd_new(10, log(c(1, 1, 1, 1)), list(method = "tilted_uniform", tilt = 20.0))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

433 
  1 
> 
> distr <- ghupd_new(10, log(c(1, 1, 1, 1)), list(method = "tilted_uniform", tilt = -20.0))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

811 
  1 
> 
> 
> distr <- ghupd_new(10, rep(1, 5), list(method = "tilted_uniform", tilt = 0.5))
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(5, 5)))
[1] 0.5703497
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(9, 1)))
[1] 0.000191331
> 
> sum(sapply(1:5, \(x) {
+   exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(10 - x, x)))
+ })) # Should be 1
[1] 1
> 
> 
> 
> # CRP
> 
> distr <- ghupd_new(9, log(c(1, 1, 1, 1)), list(method = "crp", concentration = 2.0))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

   333    432    441    522    531    621    711 
0.0195 0.1240 0.0949 0.0753 0.2056 0.2588 0.2219 
> 
> 
> library(gourd)
> n_items <- 9
> concentration <- 2
> crp <- CRPPartition(nItems = n_items, concentration = concentration)
> x <- samplePartition(crp, 100000)
> w <- apply(x, 1, \(y) length(unique(y))) == 4
> mean(w)
[1] 0.29636
> z <- table(apply(x[w,], 1, \(y) paste0(rev(sort(table(y))), collapse="")))
> z / sum(z)

      3222       3321       4221       4311       5211       6111 
0.03623971 0.14489135 0.17050209 0.22641382 0.27486840 0.14708463 
> 
> 
> # Tilted CRP
> # 
> distr <- ghupd_new(9, log(c(1, 1, 1, 1)), list(method = "tilted_crp", concentration = 1.0, tilt = 0))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

   333    432    441    522    531    621    711 
0.0173 0.1303 0.0981 0.0767 0.2062 0.2537 0.2177 
> 
> distr <- ghupd_new(9, log(c(1, 1, 1, 1)), list(method = "tilted_crp", concentration = 1.0, tilt = -2))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

711 
  1 
> 
> distr <- ghupd_new(9, log(c(1, 1, 1, 1)), list(method = "tilted_crp", concentration = 1.0, tilt = 2))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

   333    432    441    522    531    621 
0.6064 0.3863 0.0035 0.0028 0.0009 0.0001 
> 
> distr <- ghupd_new(9, log(c(1, 1, 1, 1)), list(method = "tilted_crp", concentration = 1.0, tilt = 20))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

333 
  1 
> 
> 
> 
> 
> distr <- ghupd_new(1000000, rep(1, 100), list(method = "uniform"))
> cluster_sizes <- rev(sort(table(ghupd_sample_partition(distr))))
> ghupd_log_probability_cluster_sizes_given_n_clusters(distr, cluster_sizes)
[1] -401.749
> print(system.time(sampled_partitions <- sapply(seq_len(1000), \(x) ghupd_sample_partition(distr))))
   user  system elapsed 
 28.206   3.057  31.448 
> dim(sampled_partitions)
[1] 1000000    1000
> print(system.time(apply(sampled_partitions, 2, \(partition) ghupd_log_probability_partition(distr, partition))))
   user  system elapsed 
 23.425   2.068  25.644 
> 
> 
> distr <- ghupd_new(1000000, rep(1, 100), list(method = "crp", concentration = 1.0))
> cluster_sizes <- rev(sort(table(ghupd_sample_partition(distr))))
> ghupd_log_probability_cluster_sizes_given_n_clusters(distr, cluster_sizes)
[1] -Inf
> print(system.time(sampled_partitions <- sapply(seq_len(1000), \(x) ghupd_sample_partition(distr))))
   user  system elapsed 
 89.467  21.737 111.869 
> dim(sampled_partitions)
[1] 1000000    1000
> print(system.time(apply(sampled_partitions, 2, \(partition) ghupd_log_probability_partition(distr, partition))))
   user  system elapsed 
  5.032   2.537   7.606 
> 
> 
> engine <- function(cluster_sizes_distribution) {
+   distr <- ghupd_new(50000, rep(1, 25), cluster_sizes_distribution = cluster_sizes_distribution)
+   cluster_sizes <- rev(sort(table(ghupd_sample_partition(distr))))
+   ghupd_log_probability_cluster_sizes_given_n_clusters(distr, cluster_sizes)
+   sampled_partitions <- sapply(seq_len(1000), \(x) ghupd_sample_partition(distr))
+   dim(sampled_partitions)
+   apply(sampled_partitions, 2, \(partition) ghupd_log_probability_partition(distr, partition))
+ }
> 
> microbenchmark::microbenchmark(
+   engine(list(method = "uniform")),
+   engine(list(method = "tilted_uniform", tilt = 0.0000000000001)),
+   engine(list(method = "crp", concentration = 1.0)),
+   engine(list(method = "tilted_crp", concentration = 1.0, tilt = 0.0000000000001)),
+ times = 5)
Unit: seconds
                                                                 expr      min
                                     engine(list(method = "uniform")) 1.468009
                engine(list(method = "tilted_uniform", tilt = 1e-13)) 1.596147
                      engine(list(method = "crp", concentration = 1)) 1.670772
 engine(list(method = "tilted_crp", concentration = 1, tilt = 1e-13)) 1.663839
       lq     mean   median       uq      max neval
 1.490686 1.549418 1.500931 1.550202 1.737261     5
 1.712146 1.791097 1.837594 1.881343 1.928256     5
 1.677411 1.771352 1.694663 1.862676 1.951238     5
 1.829118 1.886190 1.898946 1.937507 2.101543     5
> 
> 
> proc.time()
   user  system elapsed 
187.944  35.054 224.032 
