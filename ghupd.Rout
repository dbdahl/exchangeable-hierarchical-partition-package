
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(xhp)
> 
> # Uniform
> 
> distr <- ghupd_new(10, log(c(1, 1, 1, 1)), list(method = "uniform"))
> 
> sum(sapply(1:5, \(x) {
+   exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(10 - x, x)))
+ })) # Should be 1
[1] 1
> 
> 
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(9, 1)))
[1] 0.2
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(8, 2)))
[1] 0.2
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(7, 3)))
[1] 0.2
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(6, 4)))
[1] 0.2
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(5, 5)))
[1] 0.2
> 
> 
> exp(ghupd_log_probability_n_clusters(distr, 2))
[1] 0.25
> 
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(9, 1)))
[1] 0.2
> ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(5, 5))
[1] -1.609438
> 
> 
> 
> 
> distr <- ghupd_new(10, log(c(0.20, 0.30, 0.10, 0.25, 0.15)), list(method = "uniform"))
> 
> x <- table(sapply(seq_len(10000), \(x) ghupd_sample_n_clusters(distr)))
> x / sum(x)  # Should match weights above

     1      2      3      4      5 
0.1998 0.2979 0.0982 0.2504 0.1537 
> 
> distr <- ghupd_new(10, log(c(1, 1, 1, 1, 1)), list(method = "uniform"))
> 
> x <- table(sapply(seq_len(10000), \(x) ghupd_sample_n_clusters(distr)))
> x / sum(x)  # Should be uniform

     1      2      3      4      5 
0.2021 0.2012 0.1959 0.2026 0.1982 
> 
> # Should be an error
> tryCatch(ghupd_sample_cluster_sizes_given_n_clusters(distr, 0), error = \(x) x)
<simpleError in ghupd_sample_cluster_sizes_given_n_clusters(distr, 0): 'n_clusters' is out of bounds>
> ghupd_sample_cluster_sizes_given_n_clusters(distr, 5)
[1] 5 2 1 1 1
> tryCatch(ghupd_sample_cluster_sizes_given_n_clusters(distr, 6), error = \(x) x)
<simpleError in ghupd_sample_cluster_sizes_given_n_clusters(distr, 6): 'n_clusters' is out of bounds>
> 
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 2))), collapse="")))
> x / sum(x)  # Should be uniform

    55     64     73     82     91 
0.2072 0.1918 0.2084 0.1968 0.1958 
> 
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)  # Should be uniform

   433    442    532    541    622    631    721    811 
0.1284 0.1220 0.1243 0.1216 0.1257 0.1239 0.1296 0.1245 
> 
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 4))), collapse="")))
> x / sum(x)  # Should be uniform

  3322   3331   4222   4321   4411   5221   5311   6211   7111 
0.1099 0.1099 0.1106 0.1090 0.1095 0.1156 0.1084 0.1125 0.1146 
> 
> sum(sapply(seq_len(1000), \(x) length(unique(ghupd_sample_partition_given_n_clusters(distr, 4)))) != 4) # Should be zero
[1] 0
> 
> sum(sapply(seq_len(1000), \(x) length(unique(ghupd_sample_partition_given_n_clusters(distr, 3)))) != 3) # Should be zero
[1] 0
> 
> rev(sort(table(ghupd_sample_partition_given_cluster_sizes(distr, c(6, 4)))))

2 1 
6 4 
> 
> # Should be an error
> tryCatch(ghupd_sample_partition_given_cluster_sizes(distr, c(4, 1, 1, 1, 1, 1)), error = \(x) x)
<simpleError in ghupd_sample_partition_given_cluster_sizes(distr, c(4, 1, 1,     1, 1, 1)): 'cluster_sizes' implies more clusters than specified>
> 
> tryCatch(ghupd_sample_partition_given_cluster_sizes(distr, c(4, 1)), error = \(x) x)
<simpleError in ghupd_sample_partition_given_cluster_sizes(distr, c(4, 1)): 'cluster_sizes' implies the wrong number of items>
> 
> distr <- ghupd_new(10, log(c(1)), list(method = "uniform"))
> tryCatch(ghupd_new(10, numeric(0), list(method = "uniform")), error = \(x) x)
<simpleError in ghupd_new(10, numeric(0), list(method = "uniform")): There must be at least one cluster>
> tryCatch(ghupd_new(10, -Inf, list(method = "uniform")), error = \(x) x)
<simpleError in ghupd_new(10, -Inf, list(method = "uniform")): Invalid distribution for the number of clusters>
> x <- table(sapply(seq_len(10000), \(x) ghupd_sample_n_clusters(distr)))
> x / sum(x)  # Should be one

1 
1 
> 
> distr <- ghupd_new(10, rep(1, 5), list(method = "uniform"))
> exp(ghupd_log_probability_n_clusters(distr, 0)) # Should be zero
[1] 0
> exp(ghupd_log_probability_n_clusters(distr, 1)) # Should be 0.2
[1] 0.2
> exp(ghupd_log_probability_n_clusters(distr, 5)) # Should be 0.2
[1] 0.2
> exp(ghupd_log_probability_n_clusters(distr, 6)) # Should be zero
[1] 0
> 
> exp(-ghupd_log_probability_partition_given_cluster_sizes(distr, c(5, 3, 2))) # Should be 2520
[1] 2520
> exp(-ghupd_log_probability_partition_given_cluster_sizes(distr, c(5, 3, 1))) # Should be zero
[1] Inf
> 
> ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(5, 3, 2)) # Should be the same
[1] -2.079442
> ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(6, 3, 1)) # Should be the same
[1] -2.079442
> ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(7, 2, 1)) # Should be the same
[1] -2.079442
> ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(4, 3, 3)) # Should be the same
[1] -2.079442
> 
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(5, 5))) # Should be 0.2
[1] 0.2
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(6, 4))) # Should be 0.2
[1] 0.2
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(7, 3))) # Should be 0.2
[1] 0.2
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(8, 2))) # Should be 0.2
[1] 0.2
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(9, 1))) # Should be 0.2
[1] 0.2
> 
> distr <- ghupd_new(5, c(1, 1, 1, 1, 1), list(method = "uniform"))
> cluster_sizes <- rev(sort(table(ghupd_sample_partition(distr))))
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, cluster_sizes))
[1] 0.5
> 
> n_items <- 10
> distr <- ghupd_new(n_items, c(1, 1, 1, 1), list(method = "uniform"))
> partitions <- salso::enumerate.partitions(n_items)
> x <- apply(partitions, 1, \(p) exp(ghupd_log_probability_partition(distr, p)))
> sum(x == 0.0)
[1] 72028
> sum(x != 0.0)
[1] 43947
> sum(x) # Should be 1
[1] 1
> 
> n_items <- 10
> distr <- ghupd_new(n_items, rep(1, n_items), list(method = "uniform"))
> partitions <- salso::enumerate.partitions(n_items)
> x <- apply(partitions, 1, \(p) exp(ghupd_log_probability_partition(distr, p)))
> sum(x == 0.0)
[1] 0
> sum(x != 0.0)
[1] 115975
> sum(x) # Should be 1
[1] 1
> 
> 
> # Tilted Uniform
> 
> distr <- ghupd_new(10, log(c(1, 1, 1, 1)), list(method = "tilted_uniform", tilt = 0.0))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)  # Should be uniform

   433    442    532    541    622    631    721    811 
0.1282 0.1294 0.1258 0.1238 0.1215 0.1255 0.1224 0.1234 
> 
> distr <- ghupd_new(10, log(c(1, 1, 1, 1)), list(method = "tilted_uniform", tilt = 0.5))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

   433    442    532    541    622    631    721    811 
0.3880 0.2948 0.1766 0.0757 0.0368 0.0252 0.0028 0.0001 
> 
> distr <- ghupd_new(10, log(c(1, 1, 1, 1)), list(method = "tilted_uniform", tilt = -0.5))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

   433    442    532    541    622    631    721    811 
0.0137 0.0109 0.0174 0.0022 0.0765 0.0050 0.0444 0.8299 
> 
> distr <- ghupd_new(10, log(c(1, 1, 1, 1)), list(method = "tilted_uniform", tilt = 2.0))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

   433    442    532 
0.8983 0.0886 0.0131 
> 
> distr <- ghupd_new(10, log(c(1, 1, 1, 1)), list(method = "tilted_uniform", tilt = -2.0))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

   622    721    811 
0.0004 0.0001 0.9995 
> 
> distr <- ghupd_new(10, log(c(1, 1, 1, 1)), list(method = "tilted_uniform", tilt = 20.0))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

433 
  1 
> 
> distr <- ghupd_new(10, log(c(1, 1, 1, 1)), list(method = "tilted_uniform", tilt = -20.0))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

811 
  1 
> 
> 
> distr <- ghupd_new(10, rep(1, 5), list(method = "tilted_uniform", tilt = 0.5))
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(5, 5)))
[1] 0.5703497
> exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(9, 1)))
[1] 0.000191331
> 
> sum(sapply(1:5, \(x) {
+   exp(ghupd_log_probability_cluster_sizes_given_n_clusters(distr, c(10 - x, x)))
+ })) # Should be 1
[1] 1
> 
> 
> 
> # CRP
> 
> distr <- ghupd_new(9, log(c(1, 1, 1, 1)), list(method = "crp", concentration = 2.0))
> x <- table(sapply(seq_len(20000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 4))), collapse="")))
> x / sum(x)

   3222    3321    4221    4311    5211    6111 
0.03575 0.14660 0.17245 0.22925 0.26690 0.14905 
> 
> 
> library(gourd)
> n_items <- 9
> concentration <- 2
> crp <- CRPPartition(nItems = n_items, concentration = concentration)
> x <- samplePartition(crp, 100000)
> w <- apply(x, 1, \(y) length(unique(y))) == 4
> mean(w)
[1] 0.29767
> z <- table(apply(x[w,], 1, \(y) paste0(rev(sort(table(y))), collapse="")))
> z / sum(z)

      3222       3321       4221       4311       5211       6111 
0.03819666 0.15073739 0.16582121 0.22541741 0.26653677 0.15329056 
> 
> 
> # Tilted CRP
> 
> distr <- ghupd_new(9, log(c(1, 1, 1, 1)), list(method = "tilted_crp", concentration = 1.0, tilt = 0))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

   333    432    441    522    531    621    711 
0.0193 0.1295 0.0969 0.0719 0.2063 0.2603 0.2158 
> 
> distr <- ghupd_new(9, log(c(1, 1, 1, 1)), list(method = "crp", concentration = 1.0, discount = 0.3))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

   333    432    441    522    531    621    711 
0.0185 0.1195 0.0917 0.0780 0.2090 0.2593 0.2240 
> 
> distr <- ghupd_new(9, log(c(1, 1, 1, 1)), list(method = "tilted_crp", concentration = 1.0, tilt = 2))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

   333    432    441    522    531 
0.6071 0.3879 0.0027 0.0017 0.0006 
> 
> distr <- ghupd_new(9, log(c(1, 1, 1, 1)), list(method = "tilted_crp", concentration = 1.0, tilt = 20))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(ghupd_sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

333 
  1 
> 
> 
> 
> 
> distr <- ghupd_new(1000000, rep(1, 100), list(method = "uniform"))
> cluster_sizes <- rev(sort(table(ghupd_sample_partition(distr))))
> ghupd_log_probability_cluster_sizes_given_n_clusters(distr, cluster_sizes)
[1] -464.2611
> print(system.time(sampled_partitions <- sapply(seq_len(1000), \(x) ghupd_sample_partition(distr))))
   user  system elapsed 
 23.565   2.724  26.557 
> dim(sampled_partitions)
[1] 1000000    1000
> print(system.time(apply(sampled_partitions, 2, \(partition) ghupd_log_probability_partition(distr, partition))))
   user  system elapsed 
 19.640   1.747  21.600 
> 
> 
> distr <- ghupd_new(1000000, rep(1, 100), list(method = "crp", concentration = 1.0))
> cluster_sizes <- rev(sort(table(ghupd_sample_partition(distr))))
> ghupd_log_probability_cluster_sizes_given_n_clusters(distr, cluster_sizes)
[1] -293.0966
> print(system.time(sampled_partitions <- sapply(seq_len(1000), \(x) ghupd_sample_partition(distr))))
   user  system elapsed 
 85.663   2.401  88.822 
> dim(sampled_partitions)
[1] 1000000    1000
> print(system.time(apply(sampled_partitions, 2, \(partition) ghupd_log_probability_partition(distr, partition))))
   user  system elapsed 
 39.306   2.326  41.936 
> 
> 
> engine <- function(cluster_sizes_distribution) {
+   distr <- ghupd_new(50000, rep(1, 25), cluster_sizes_distribution = cluster_sizes_distribution)
+   cluster_sizes <- rev(sort(table(ghupd_sample_partition(distr))))
+   ghupd_log_probability_cluster_sizes_given_n_clusters(distr, cluster_sizes)
+   sampled_partitions <- sapply(seq_len(1000), \(x) ghupd_sample_partition(distr))
+   dim(sampled_partitions)
+   apply(sampled_partitions, 2, \(partition) ghupd_log_probability_partition(distr, partition))
+ }
> 
> microbenchmark::microbenchmark(
+   engine(list(method = "uniform")),
+   engine(list(method = "tilted_uniform", tilt = 0.0000000000001)),
+   engine(list(method = "crp", concentration = 1.0)),
+   engine(list(method = "tilted_crp", concentration = 1.0, tilt = 0.0000000000001)),
+ times = 5)
Unit: seconds
                                                                 expr      min
                                     engine(list(method = "uniform")) 1.327005
                engine(list(method = "tilted_uniform", tilt = 1e-13)) 1.383181
                      engine(list(method = "crp", concentration = 1)) 2.446154
 engine(list(method = "tilted_crp", concentration = 1, tilt = 1e-13)) 2.511382
       lq     mean   median       uq      max neval
 1.329858 1.419021 1.371787 1.417941 1.648514     5
 1.505689 1.563662 1.558784 1.566168 1.804487     5
 2.600091 2.598977 2.603681 2.634999 2.709959     5
 2.516752 2.590882 2.534773 2.594291 2.797211     5
> 
> 
> proc.time()
   user  system elapsed 
215.768  14.035 231.503 
