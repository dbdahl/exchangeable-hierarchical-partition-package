
R Under development (unstable) (2025-05-30 r88253) -- "Unsuffered Consequences"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # make_gupd
> 
> lambda <- 3
> prob <- dpois(1:5, lambda)
> n_items <- 11
> 
> f <- xhp::make_gupd(prob, n_items, log = FALSE)
> 
> # Two ways to use the function.
> f(c(1,1,1,1,1,1,2,2,2,3,3))
[1] 9.074092e-06
> f(3)
[1] 9.074092e-06
> 
> partitions <- salso::enumerate.partitions(n_items)
> p <- apply(partitions, 1, f)
> sum(p)
[1] 1
> 
> lambda <- 10
> prob <- dpois(1:50, lambda)
> n_items <- 1000000
> 
> k <- c(2, 5, 20, 30, 50)
> 
> system.time(f1 <- xhp::make_gupd(prob, n_items, log = TRUE))
   user  system elapsed 
  1.065   0.000   1.068 
> o1 <- sapply(k, f1)
> o1
[1]  -693152.6 -1609436.4 -2995696.2 -3401138.3 -3911917.9
> 
> 
> # Uniform
> 
> distr <- xhp::new(10, log(c(1, 1, 1, 1)), list(method = "uniform"))
> 
> sum(sapply(1:5, \(x) {
+   exp(xhp::log_probability_cluster_sizes_given_n_clusters(distr, c(10 - x, x)))
+ })) # Should be 1
[1] 1
> 
> 
> exp(xhp::log_probability_cluster_sizes_given_n_clusters(distr, c(9, 1)))
[1] 0.2
> exp(xhp::log_probability_cluster_sizes_given_n_clusters(distr, c(8, 2)))
[1] 0.2
> exp(xhp::log_probability_cluster_sizes_given_n_clusters(distr, c(7, 3)))
[1] 0.2
> exp(xhp::log_probability_cluster_sizes_given_n_clusters(distr, c(6, 4)))
[1] 0.2
> exp(xhp::log_probability_cluster_sizes_given_n_clusters(distr, c(5, 5)))
[1] 0.2
> 
> 
> exp(xhp::log_probability_n_clusters(distr, 2))
[1] 0.25
> 
> exp(xhp::log_probability_cluster_sizes_given_n_clusters(distr, c(9, 1)))
[1] 0.2
> xhp::log_probability_cluster_sizes_given_n_clusters(distr, c(5, 5))
[1] -1.609438
> 
> 
> 
> 
> distr <- xhp::new(10, log(c(0.20, 0.30, 0.10, 0.25, 0.15)), list(method = "uniform"))
> 
> x <- table(sapply(seq_len(10000), \(x) xhp::sample_n_clusters(distr)))
> x / sum(x)  # Should match weights above

     1      2      3      4      5 
0.1943 0.2987 0.1028 0.2496 0.1546 
> 
> distr <- xhp::new(10, log(c(1, 1, 1, 1, 1)), list(method = "uniform"))
> 
> x <- table(sapply(seq_len(10000), \(x) xhp::sample_n_clusters(distr)))
> x / sum(x)  # Should be uniform

     1      2      3      4      5 
0.1982 0.1992 0.1994 0.1980 0.2052 
> 
> # Should be an error
> tryCatch(xhp::sample_cluster_sizes_given_n_clusters(distr, 0), error = \(x) x)
<simpleError in xhp::sample_cluster_sizes_given_n_clusters(distr, 0): Number of clusters is greater than the maximum number of clusters.>
> xhp::sample_cluster_sizes_given_n_clusters(distr, 5)
[1] 2 2 2 2 2
> tryCatch(xhp::sample_cluster_sizes_given_n_clusters(distr, 6), error = \(x) x)
<simpleError in xhp::sample_cluster_sizes_given_n_clusters(distr, 6): Number of clusters is greater than the maximum number of clusters.>
> 
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(xhp::sample_cluster_sizes_given_n_clusters(distr, 2))), collapse="")))
> x / sum(x)  # Should be uniform

    55     64     73     82     91 
0.2001 0.1928 0.2057 0.2039 0.1975 
> 
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(xhp::sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)  # Should be uniform

   433    442    532    541    622    631    721    811 
0.1210 0.1252 0.1248 0.1219 0.1243 0.1282 0.1242 0.1304 
> 
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(xhp::sample_cluster_sizes_given_n_clusters(distr, 4))), collapse="")))
> x / sum(x)  # Should be uniform

  3322   3331   4222   4321   4411   5221   5311   6211   7111 
0.1085 0.1152 0.1089 0.1108 0.1149 0.1105 0.1088 0.1109 0.1115 
> 
> sum(sapply(seq_len(1000), \(x) length(unique(xhp::sample_partition_given_n_clusters(distr, 4)))) != 4) # Should be zero
[1] 0
> 
> sum(sapply(seq_len(1000), \(x) length(unique(xhp::sample_partition_given_n_clusters(distr, 3)))) != 3) # Should be zero
[1] 0
> 
> rev(sort(table(xhp::sample_partition_given_cluster_sizes(distr, c(6, 4)))))

1 2 
6 4 
> 
> # Should be an error
> tryCatch(xhp::sample_partition_given_cluster_sizes(distr, c(4, 1, 1, 1, 1, 1)), error = \(x) x)
<simpleError in xhp::sample_partition_given_cluster_sizes(distr, c(4, 1, 1, 1,     1, 1)): 'cluster_sizes' implies more clusters than specified>
> 
> tryCatch(xhp::sample_partition_given_cluster_sizes(distr, c(4, 1)), error = \(x) x)
<simpleError in xhp::sample_partition_given_cluster_sizes(distr, c(4, 1)): 'cluster_sizes' implies the wrong number of items>
> 
> distr <- xhp::new(10, log(c(1)), list(method = "uniform"))
> tryCatch(xhp::new(10, numeric(0), list(method = "uniform")), error = \(x) x)
<simpleError in xhp::new(10, numeric(0), list(method = "uniform")): Maximum number of clusters must be at least 1.>
> tryCatch(xhp::new(10, -Inf, list(method = "uniform")), error = \(x) x)
<simpleError in xhp::new(10, -Inf, list(method = "uniform")): Invalid distribution for the number of clusters.>
> x <- table(sapply(seq_len(10000), \(x) xhp::sample_n_clusters(distr)))
> x / sum(x)  # Should be one

1 
1 
> 
> distr <- xhp::new(10, rep(1, 5), list(method = "uniform"))
> exp(xhp::log_probability_n_clusters(distr, 0)) # Should be zero
[1] 0
> exp(xhp::log_probability_n_clusters(distr, 1)) # Should be 0.2
[1] 0.2
> exp(xhp::log_probability_n_clusters(distr, 5)) # Should be 0.2
[1] 0.2
> exp(xhp::log_probability_n_clusters(distr, 6)) # Should be zero
[1] 0
> 
> exp(-xhp::log_probability_partition_given_cluster_sizes(distr, c(5, 3, 2))) # Should be 2520
[1] 2520
> exp(-xhp::log_probability_partition_given_cluster_sizes(distr, c(5, 3, 1))) # Should be infinity
[1] Inf
> 
> xhp::log_probability_cluster_sizes_given_n_clusters(distr, c(5, 3, 2)) # Should be the same
[1] -2.079442
> xhp::log_probability_cluster_sizes_given_n_clusters(distr, c(6, 3, 1)) # Should be the same
[1] -2.079442
> xhp::log_probability_cluster_sizes_given_n_clusters(distr, c(7, 2, 1)) # Should be the same
[1] -2.079442
> xhp::log_probability_cluster_sizes_given_n_clusters(distr, c(4, 3, 3)) # Should be the same
[1] -2.079442
> 
> exp(xhp::log_probability_cluster_sizes_given_n_clusters(distr, c(5, 5))) # Should be 0.2
[1] 0.2
> exp(xhp::log_probability_cluster_sizes_given_n_clusters(distr, c(6, 4))) # Should be 0.2
[1] 0.2
> exp(xhp::log_probability_cluster_sizes_given_n_clusters(distr, c(7, 3))) # Should be 0.2
[1] 0.2
> exp(xhp::log_probability_cluster_sizes_given_n_clusters(distr, c(8, 2))) # Should be 0.2
[1] 0.2
> exp(xhp::log_probability_cluster_sizes_given_n_clusters(distr, c(9, 1))) # Should be 0.2
[1] 0.2
> 
> distr <- xhp::new(5, c(1, 1, 1, 1, 1), list(method = "uniform"))
> cluster_sizes <- rev(sort(table(xhp::sample_partition(distr))))
> exp(xhp::log_probability_cluster_sizes_given_n_clusters(distr, cluster_sizes))
[1] 1
> 
> n_items <- 10
> distr <- xhp::new(n_items, c(1, 1, 1, 1), list(method = "uniform"))
> partitions <- salso::enumerate.partitions(n_items)
> x <- apply(partitions, 1, \(p) exp(xhp::log_probability_partition(distr, p)))
> sum(x == 0.0)
[1] 72028
> sum(x != 0.0)
[1] 43947
> sum(x) # Should be 1
[1] 1
> 
> n_items <- 10
> distr <- xhp::new(n_items, rep(1, n_items), list(method = "uniform"))
> partitions <- salso::enumerate.partitions(n_items)
> x <- apply(partitions, 1, \(p) exp(xhp::log_probability_partition(distr, p)))
> sum(x == 0.0)
[1] 0
> sum(x != 0.0)
[1] 115975
> sum(x) # Should be 1
[1] 1
> 
> 
> # Tilted Uniform
> 
> distr <- xhp::new(10, log(c(1, 1, 1, 1)), list(method = "tilted_uniform", tilt = 0.0))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(xhp::sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)  # Should be uniform

   433    442    532    541    622    631    721    811 
0.1231 0.1270 0.1293 0.1218 0.1268 0.1224 0.1275 0.1221 
> 
> distr <- xhp::new(10, log(c(1, 1, 1, 1)), list(method = "tilted_uniform", tilt = 0.5))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(xhp::sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

   433    442    532    541    622    631    721    811 
0.3863 0.2927 0.1769 0.0722 0.0403 0.0282 0.0033 0.0001 
> 
> distr <- xhp::new(10, log(c(1, 1, 1, 1)), list(method = "tilted_uniform", tilt = -0.5))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(xhp::sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

   433    442    532    541    622    631    721    811 
0.0143 0.0104 0.0180 0.0029 0.0788 0.0054 0.0423 0.8279 
> 
> distr <- xhp::new(10, log(c(1, 1, 1, 1)), list(method = "tilted_uniform", tilt = 2.0))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(xhp::sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

   433    442    532    541 
0.9026 0.0856 0.0114 0.0004 
> 
> distr <- xhp::new(10, log(c(1, 1, 1, 1)), list(method = "tilted_uniform", tilt = -2.0))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(xhp::sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

   622    811 
0.0006 0.9994 
> 
> distr <- xhp::new(10, log(c(1, 1, 1, 1)), list(method = "tilted_uniform", tilt = 20.0))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(xhp::sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

433 
  1 
> 
> distr <- xhp::new(10, log(c(1, 1, 1, 1)), list(method = "tilted_uniform", tilt = -20.0))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(xhp::sample_cluster_sizes_given_n_clusters(distr, 3))), collapse="")))
> x / sum(x)

811 
  1 
> 
> 
> distr <- xhp::new(10, rep(1, 5), list(method = "tilted_uniform", tilt = 0.5))
> exp(xhp::log_probability_cluster_sizes_given_n_clusters(distr, c(5, 5)))
[1] 0.5703497
> exp(xhp::log_probability_cluster_sizes_given_n_clusters(distr, c(9, 1)))
[1] 0.000191331
> 
> sum(sapply(1:5, \(x) {
+   exp(xhp::log_probability_cluster_sizes_given_n_clusters(distr, c(10 - x, x)))
+ })) # Should be 1
[1] 1
> 
> 
> 
> # CRP
> 
> distr <- xhp::new(9, log(c(1, 1, 1, 1)), list(method = "crp1", concentration = 2.0))
> x <- table(sapply(seq_len(20000), \(x) paste0(rev(sort(xhp::sample_cluster_sizes_given_n_clusters(distr, 4))), collapse = "")))
> x / sum(x)

   3222    3321    4221    4311    5211    6111 
0.03790 0.15245 0.16815 0.22020 0.27340 0.14790 
> 
> 
> library(gourd)
> n_items <- 9
> concentration <- 2
> crp <- CRPPartition(nItems = n_items, concentration = concentration)
> x <- samplePartition(crp, 100000)
> w <- apply(x, 1, \(y) length(unique(y))) == 4
> mean(w)
[1] 0.29683
> z <- table(apply(x[w, ], 1, \(y) paste0(rev(sort(table(y))), collapse = "")))
> z / sum(z)

      3222       3321       4221       4311       5211       6111 
0.03655291 0.14964795 0.16895193 0.22841357 0.26867230 0.14776134 
> 
> 
> 
> # Tilted CRP
> 
> distr <- xhp::new(9, log(c(1, 1, 1, 1)), list(method = "tilted_crp1", concentration = 1.0, tilt = 0))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(xhp::sample_cluster_sizes_given_n_clusters(distr, 3))), collapse = "")))
> x / sum(x)

   333    432    441    522    531    621    711 
0.0191 0.1261 0.0905 0.0794 0.2072 0.2588 0.2189 
> 
> distr <- xhp::new(9, log(c(1, 1, 1, 1)), list(method = "crp1", concentration = 1.0, discount = 0.3))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(xhp::sample_cluster_sizes_given_n_clusters(distr, 3))), collapse = "")))
> x / sum(x)

   333    432    441    522    531    621    711 
0.0211 0.1225 0.0942 0.0747 0.2091 0.2587 0.2197 
> 
> distr <- xhp::new(9, log(c(1, 1, 1, 1)), list(method = "tilted_crp1", concentration = 1.0, tilt = 2))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(xhp::sample_cluster_sizes_given_n_clusters(distr, 3))), collapse = "")))
> x / sum(x)

   333    432    441    522    531 
0.6007 0.3937 0.0029 0.0022 0.0005 
> 
> distr <- xhp::new(9, log(c(1, 1, 1, 1)), list(method = "tilted_crp1", concentration = 1.0, tilt = 20))
> x <- table(sapply(seq_len(10000), \(x) paste0(rev(sort(xhp::sample_cluster_sizes_given_n_clusters(distr, 3))), collapse = "")))
> x / sum(x)

333 
  1 
> 
> 
> 
> distr <- xhp::new(1000000, rep(1, 100), list(method = "uniform"))
> cluster_sizes <- rev(sort(table(xhp::sample_partition(distr))))
> xhp::log_probability_cluster_sizes_given_n_clusters(distr, cluster_sizes)
[1] -57.71083
> print(system.time(sampled_partitions <- sapply(seq_len(1000), \(x) xhp::sample_partition(distr))))
   user  system elapsed 
 27.597   3.066  30.859 
> dim(sampled_partitions)
[1] 1000000    1000
> print(system.time(apply(sampled_partitions, 2, \(partition) xhp::log_probability_partition(distr, partition))))
   user  system elapsed 
 23.106   2.048  25.318 
> 
> 
> distr <- xhp::new(1000000, rep(1, 100), list(method = "crp1", concentration = 1.0))
> cluster_sizes <- rev(sort(table(xhp::sample_partition(distr))))
> xhp::log_probability_cluster_sizes_given_n_clusters(distr, cluster_sizes)
[1] -218.957
> print(system.time(sampled_partitions <- sapply(seq_len(1000), \(x) xhp::sample_partition(distr))))
   user  system elapsed 
 91.646   2.579  94.933 
> dim(sampled_partitions)
[1] 1000000    1000
> print(system.time(apply(sampled_partitions, 2, \(partition) xhp::log_probability_partition(distr, partition))))
   user  system elapsed 
 41.205   2.567  44.048 
> 
> 
> engine <- function(cluster_sizes_distribution) {
+   distr <- xhp::new(50000, rep(1, 25), cluster_sizes_distribution = cluster_sizes_distribution)
+   cluster_sizes <- rev(sort(table(xhp::sample_partition(distr))))
+   xhp::log_probability_cluster_sizes_given_n_clusters(distr, cluster_sizes)
+   sampled_partitions <- sapply(seq_len(1000), \(x) xhp::sample_partition(distr))
+   dim(sampled_partitions)
+   apply(sampled_partitions, 2, \(partition) xhp::log_probability_partition(distr, partition))
+ }
> 
> microbenchmark::microbenchmark(
+   engine(list(method = "uniform")),
+   engine(list(method = "tilted_uniform", tilt = 0.0000000000001)),
+   engine(list(method = "crp1", concentration = 1.0)),
+   engine(list(method = "tilted_crp1", concentration = 1.0, tilt = 0.0000000000001)),
+ times = 5)
Unit: seconds
                                                                  expr      min
                                      engine(list(method = "uniform")) 1.434824
                 engine(list(method = "tilted_uniform", tilt = 1e-13)) 1.467721
                      engine(list(method = "crp1", concentration = 1)) 2.501750
 engine(list(method = "tilted_crp1", concentration = 1, tilt = 1e-13)) 2.494420
       lq     mean   median       uq      max neval
 1.500484 1.548853 1.544249 1.550452 1.714257     5
 1.499938 1.609491 1.673686 1.674796 1.731313     5
 2.513162 2.602732 2.573961 2.577761 2.847029     5
 2.702483 2.708027 2.720600 2.749961 2.872672     5
> 
> 
> proc.time()
   user  system elapsed 
240.056  15.372 256.897 
